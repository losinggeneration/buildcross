diff -ruN newlib-2.0.0/newlib/configure.host newlib-2.0.0-kos/newlib/configure.host
--- newlib-2.0.0/newlib/configure.host	2012-12-04 16:43:20.000000000 -0500
+++ newlib-2.0.0-kos/newlib/configure.host	2013-05-18 00:16:34.000000000 -0400
@@ -245,6 +245,7 @@
 	;;
   sh | sh64)
 	machine_dir=sh
+	newlib_cflags="${newlib_cflags} -DREENTRANT_SYSCALLS_PROVIDED -DMALLOC_PROVIDED -DABORT_PROVIDED -DHAVE_FCNTL -ffunction-sections -fdata-sections"
 	;;
   sparc*)
 	machine_dir=sparc
diff -ruN newlib-2.0.0/newlib/libc/include/assert.h newlib-2.0.0-kos/newlib/libc/include/assert.h
--- newlib-2.0.0/newlib/libc/include/assert.h	2012-10-16 15:00:30.000000000 -0400
+++ newlib-2.0.0-kos/newlib/libc/include/assert.h	2013-05-18 00:17:28.000000000 -0400
@@ -13,8 +13,8 @@
 #ifdef NDEBUG           /* required by ANSI standard */
 # define assert(__e) ((void)0)
 #else
-# define assert(__e) ((__e) ? (void)0 : __assert_func (__FILE__, __LINE__, \
-						       __ASSERT_FUNC, #__e))
+# define assert(__e) ((__e) ? (void)0 : __assert (__FILE__, __LINE__, \
+						       #__e, (char *)0, __ASSERT_FUNC))
 
 # ifndef __ASSERT_FUNC
   /* Use g++'s demangled names in C++.  */
@@ -36,10 +36,8 @@
 # endif /* !__ASSERT_FUNC */
 #endif /* !NDEBUG */
 
-void _EXFUN(__assert, (const char *, int, const char *)
-	    _ATTRIBUTE ((__noreturn__)));
-void _EXFUN(__assert_func, (const char *, int, const char *, const char *)
-	    _ATTRIBUTE ((__noreturn__)));
+void _EXFUN(__assert, (const char *, int, const char *, const char *,
+                       const char *) _ATTRIBUTE ((__noreturn__)));
 
 #if __STDC_VERSION__ >= 201112L && !defined __cplusplus
 # define static_assert _Static_assert
diff -ruN newlib-2.0.0/newlib/libc/include/machine/_default_types.h newlib-2.0.0-kos/newlib/libc/include/machine/_default_types.h
--- newlib-2.0.0/newlib/libc/include/machine/_default_types.h	2012-10-16 14:45:23.000000000 -0400
+++ newlib-2.0.0-kos/newlib/libc/include/machine/_default_types.h	2013-05-18 01:00:45.000000000 -0400
@@ -9,6 +9,8 @@
 extern "C" {
 #endif
 
+#include <sys/features.h>
+
 /*
  * Guess on types by examining *_MIN / *_MAX defines.
  */
diff -ruN newlib-2.0.0/newlib/libc/include/sys/types.h newlib-2.0.0-kos/newlib/libc/include/sys/types.h
--- newlib-2.0.0/newlib/libc/include/sys/types.h	2012-07-06 06:41:21.000000000 -0400
+++ newlib-2.0.0-kos/newlib/libc/include/sys/types.h	2013-05-18 00:23:09.000000000 -0400
@@ -286,7 +286,7 @@
 
 #if defined(__XMK__)
 typedef unsigned int pthread_t;          /* identify a thread */
-#else
+#elif !defined(_arch_dreamcast)
 typedef __uint32_t pthread_t;            /* identify a thread */
 #endif
 
@@ -304,6 +304,7 @@
 #define PTHREAD_CREATE_DETACHED 0
 #define PTHREAD_CREATE_JOINABLE  1
 
+#if !defined(_arch_dreamcast)
 #if defined(__XMK__)
 typedef struct pthread_attr_s {
   int contentionscope;
@@ -337,6 +338,7 @@
 } pthread_attr_t;
 
 #endif /* !defined(__XMK__) */
+#endif /* !defined(_arch_dreamcast) */
 
 #if defined(_POSIX_THREAD_PROCESS_SHARED)
 /* NOTE: P1003.1c/D10, p. 81 defines following values for process_shared.  */
@@ -413,6 +415,7 @@
 } pthread_mutexattr_t;
 
 #else /* !defined(__XMK__) */
+#if !defined(_arch_dreamcast)
 typedef __uint32_t pthread_mutex_t;      /* identify a mutex */
 
 typedef struct {
@@ -429,10 +432,12 @@
 #endif
   int   recursive;
 } pthread_mutexattr_t;
+#endif /* !defined(_arch_dreamcast) */
 #endif /* !defined(__XMK__) */
 
 /* Condition Variables */
 
+#if !defined(_arch_dreamcast)
 typedef __uint32_t pthread_cond_t;       /* identify a condition variable */
 
 typedef struct {
@@ -441,15 +446,18 @@
   int   process_shared;       /* allow this to be shared amongst processes */
 #endif
 } pthread_condattr_t;         /* a condition attribute object */
+#endif /* !defined(_arch_dreamcast) */
 
 /* Keys */
 
+#if !defined(_arch_dreamcast)
 typedef __uint32_t pthread_key_t;        /* thread-specific data keys */
 
 typedef struct {
   int   is_initialized;  /* is this structure initialized? */
   int   init_executed;   /* has the initialization routine been run? */
 } pthread_once_t;       /* dynamic package initialization */
+#endif /* !defined(_arch_dreamcast) */
 #else
 #if defined (__CYGWIN__)
 #include <cygwin/types.h>
diff -ruN newlib-2.0.0/newlib/libc/stdlib/assert.c newlib-2.0.0-kos/newlib/libc/stdlib/assert.c
--- newlib-2.0.0/newlib/libc/stdlib/assert.c	2009-10-08 12:44:10.000000000 -0400
+++ newlib-2.0.0-kos/newlib/libc/stdlib/assert.c	2013-05-18 00:23:54.000000000 -0400
@@ -47,6 +47,8 @@
 #include <stdlib.h>
 #include <stdio.h>
 
+#if 0
+
 #ifndef HAVE_ASSERT_FUNC
 /* func can be NULL, in which case no function information is given.  */
 void
@@ -74,3 +76,4 @@
    __assert_func (file, line, NULL, failedexpr);
   /* NOTREACHED */
 }
+#endif
diff -ruN newlib-2.0.0/newlib/libc/sys/sh/ftruncate.c newlib-2.0.0-kos/newlib/libc/sys/sh/ftruncate.c
--- newlib-2.0.0/newlib/libc/sys/sh/ftruncate.c	2003-07-10 11:31:30.000000000 -0400
+++ newlib-2.0.0-kos/newlib/libc/sys/sh/ftruncate.c	2013-05-18 00:27:35.000000000 -0400
@@ -1,9 +1 @@
-#include <_ansi.h>
-#include <sys/types.h>
-#include "sys/syscall.h"
-
-int
-ftruncate (int file, off_t length)
-{
-  return __trap34 (SYS_ftruncate, file, length, 0);
-}
+/* Nothing here. */
diff -ruN newlib-2.0.0/newlib/libc/sys/sh/sys/lock.h newlib-2.0.0-kos/newlib/libc/sys/sh/sys/lock.h
--- newlib-2.0.0/newlib/libc/sys/sh/sys/lock.h	1969-12-31 19:00:00.000000000 -0500
+++ newlib-2.0.0-kos/newlib/libc/sys/sh/sys/lock.h	2013-05-18 00:26:13.000000000 -0400
@@ -0,0 +1,51 @@
+/* KallistiOS ##version##
+
+   lock_common.h
+   Copyright (C)2004 Dan Potter
+
+*/
+
+#ifndef __SYS_LOCK_H__
+#define __SYS_LOCK_H__
+
+typedef struct {
+	void	* owner;
+	int	nest;
+	volatile int lock;
+} __newlib_recursive_lock_t;
+
+#define __NEWLIB_RECURSIVE_LOCK_INIT { (void *)0, 0, 0 }
+
+typedef volatile int __newlib_lock_t;
+#define __NEWLIB_LOCK_INIT 0
+
+typedef __newlib_lock_t _LOCK_T;
+typedef __newlib_recursive_lock_t _LOCK_RECURSIVE_T;
+
+#define __LOCK_INIT(class,lock) class _LOCK_T lock = __NEWLIB_LOCK_INIT;
+#define __LOCK_INIT_RECURSIVE(class,lock) class _LOCK_RECURSIVE_T lock = __NEWLIB_RECURSIVE_LOCK_INIT;
+#define __lock_init(lock) __newlib_lock_init(&(lock))
+#define __lock_init_recursive(lock) __newlib_lock_init_recursive(&(lock))
+#define __lock_close(lock) __newlib_lock_close(&(lock))
+#define __lock_close_recursive(lock) __newlib_lock_close_recursive(&(lock))
+#define __lock_acquire(lock) __newlib_lock_acquire(&(lock))
+#define __lock_acquire_recursive(lock) __newlib_lock_acquire_recursive(&(lock))
+#define __lock_try_acquire(lock) __newlib_lock_try_acquire(&(lock))
+#define __lock_try_acquire_recursive(lock) __newlib_lock_try_acquire_recursive(&(lock))
+#define __lock_release(lock) __newlib_lock_release(&(lock))
+#define __lock_release_recursive(lock) __newlib_lock_release_recursive(&(lock))
+
+void __newlib_lock_init(__newlib_lock_t *);
+void __newlib_lock_close(__newlib_lock_t *);
+void __newlib_lock_acquire(__newlib_lock_t *);
+void __newlib_lock_try_acquire(__newlib_lock_t *);
+void __newlib_lock_release(__newlib_lock_t *);
+
+void __newlib_lock_init_recursive(__newlib_recursive_lock_t *);
+void __newlib_lock_close_recursive(__newlib_recursive_lock_t *);
+void __newlib_lock_acquire_recursive(__newlib_recursive_lock_t *);
+void __newlib_lock_try_acquire_recursive(__newlib_recursive_lock_t *);
+void __newlib_lock_release_recursive(__newlib_recursive_lock_t *);
+
+
+#endif // __NEWLIB_LOCK_COMMON_H
diff -ruN newlib-2.0.0/newlib/libc/sys/sh/syscalls.c newlib-2.0.0-kos/newlib/libc/sys/sh/syscalls.c
--- newlib-2.0.0/newlib/libc/sys/sh/syscalls.c	2008-01-21 19:24:45.000000000 -0500
+++ newlib-2.0.0-kos/newlib/libc/sys/sh/syscalls.c	2013-05-18 00:26:46.000000000 -0400
@@ -1,228 +1,2 @@
-#include <_ansi.h>
-#include <sys/types.h>
-#include <sys/stat.h>
-#include <sys/time.h>
-#include "sys/syscall.h"
-int errno;
-
-/* This is used by _sbrk.  */
-register char *stack_ptr asm ("r15");
-
-int
-_read (int file,
-       char *ptr,
-       int len)
-{
-  return __trap34 (SYS_read, file, ptr, len);
-}
-
-int
-_lseek (int file,
-	int ptr,
-	int dir)
-{
-  return __trap34 (SYS_lseek, file, ptr, dir);
-}
-
-int
-_write ( int file,
-	 char *ptr,
-	 int len)
-{
-  return __trap34 (SYS_write, file, ptr, len);
-}
-
-int
-_close (int file)
-{
-  return __trap34 (SYS_close, file, 0, 0);
-}
-
-int
-_link (char *old, char *new)
-{
-  return -1;
-}
-
-caddr_t
-_sbrk (int incr)
-{
-  extern char end;		/* Defined by the linker */
-  static char *heap_end;
-  char *prev_heap_end;
-
-  if (heap_end == 0)
-    {
-      heap_end = &end;
-    }
-  prev_heap_end = heap_end;
-  if (heap_end + incr > stack_ptr)
-    {
-      _write (1, "Heap and stack collision\n", 25);
-      abort ();
-    }
-  heap_end += incr;
-  return (caddr_t) prev_heap_end;
-}
-
-int
-_fstat (int file,
-	struct stat *st)
-{
-  st->st_mode = S_IFCHR;
-  return 0;
-}
-
-int
-_open (const char *path,
-	int flags)
-{
-  return __trap34 (SYS_open, path, flags, 0);
-}
-
-int
-_creat (const char *path,
-	int mode)
-{
-  return __trap34 (SYS_creat, path, mode, 0);
-}
-
-int
-_unlink ()
-{
-  return -1;
-}
-
-isatty (fd)
-     int fd;
-{
-  return 1;
-}
-
-_isatty (fd)
-     int fd;
-{
-  return 1;
-}
-
-
-_exit (n)
-{
-  return __trap34 (SYS_exit, n, 0, 0);
-}
-
-_kill (n, m)
-{
-  return __trap34 (SYS_exit, 0xdead, 0, 0);
-}
-
-_getpid (n)
-{
-  return 1;
-}
-
-_raise ()
-{
-}
-
-int
-_stat (const char *path, struct stat *st)
-
-{
-  return __trap34 (SYS_stat, path, st, 0);
-}
-
-int
-_chmod (const char *path, short mode)
-{
-  return __trap34 (SYS_chmod, path, mode);
-}
-
-int
-_chown (const char *path, short owner, short group)
-{
-  return __trap34 (SYS_chown, path, owner, group);
-}
-
-int
-_utime (path, times)
-     const char *path;
-     char *times;
-{
-  return __trap34 (SYS_utime, path, times);
-}
-
-int
-_fork ()
-{
-  return __trap34 (SYS_fork);
-}
-
-int
-_wait (statusp)
-     int *statusp;
-{
-  return __trap34 (SYS_wait);
-}
-
-int
-_execve (const char *path, char *const argv[], char *const envp[])
-{
-  return __trap34 (SYS_execve, path, argv, envp);
-}
-
-int
-_execv (const char *path, char *const argv[])
-{
-  return __trap34 (SYS_execv, path, argv);
-}
-
-int
-_pipe (int *fd)
-{
-  return __trap34 (SYS_pipe, fd);
-}
-
-/* This is only provided because _gettimeofday_r and _times_r are
-   defined in the same module, so we avoid a link error.  */
-clock_t
-_times (struct tms *tp)
-{
-  return -1;
-}
-
-int
-_gettimeofday (struct timeval *tv, void *tz)
-{
-  tv->tv_usec = 0;
-  tv->tv_sec = __trap34 (SYS_time);
-  return 0;
-}
-
-static inline int
-__setup_argv_for_main (int argc)
-{
-  char **argv;
-  int i = argc;
-
-  argv = __builtin_alloca ((1 + argc) * sizeof (*argv));
-
-  argv[i] = NULL;
-  while (i--) {
-    argv[i] = __builtin_alloca (1 + __trap34 (SYS_argnlen, i));
-    __trap34 (SYS_argn, i, argv[i]);
-  }
-
-  return main (argc, argv);
-}
-
-int
-__setup_argv_and_call_main ()
-{
-  int argc = __trap34 (SYS_argc);
-
-  if (argc <= 0)
-    return main (argc, NULL);
-  else
-    return __setup_argv_for_main (argc);
-}
+// This is put in here to cause link errors if a proper newlib isn't present.
+int __newlib_kos_patch = 1;
diff -ruN newlib-2.0.0/newlib/libc/sys/sh/trap.S newlib-2.0.0-kos/newlib/libc/sys/sh/trap.S
--- newlib-2.0.0/newlib/libc/sys/sh/trap.S	2002-02-08 02:11:13.000000000 -0500
+++ newlib-2.0.0-kos/newlib/libc/sys/sh/trap.S	2013-05-18 00:27:04.000000000 -0400
@@ -1,43 +0,0 @@
-#if __SH5__
-	.mode	SHmedia
-#if __SH5__ == 32 && __SHMEDIA__
-	.section	.text..SHmedia32, "ax"
-#else
-	.text
-#endif
-	.global ___trap34
-___trap34:
-	movi	34, r0
-	trapa	r0
-	pt/l	ret, tr1
-	ptabs/l	r18, tr0
-	beqi	r1, 0, tr1
-#if __SH5__ == 64
-	movi	((_errno >> 48) & 65535), r0
-	shori	((_errno >> 32) & 65535), r0
-	shori	((_errno >> 16) & 65535), r0
-#else
-	movi	((_errno >> 16) & 65535), r0
-#endif
-	shori	(_errno & 65535), r0
-	stx.l	r0, r63, r1
-ret:
-	blink	tr0, r63
-	
-#else
-	.text
-	.global	___trap34
-___trap34:
-	trapa	#34
-	tst	r1,r1	! r1 is errno
-	bt	ret
-	mov.l	perrno,r2
-	mov.l	r1,@r2
-ret:
-	rts
-	nop
-	
-	.align	2
-perrno:
-	.long	_errno
-#endif /* ! __SH5__ */
diff -ruN newlib-2.0.0/newlib/libc/sys/sh/truncate.c newlib-2.0.0-kos/newlib/libc/sys/sh/truncate.c
--- newlib-2.0.0/newlib/libc/sys/sh/truncate.c	2003-07-10 11:31:30.000000000 -0400
+++ newlib-2.0.0-kos/newlib/libc/sys/sh/truncate.c	2013-05-18 00:27:23.000000000 -0400
@@ -1,9 +1 @@
-#include <_ansi.h>
-#include <sys/types.h>
-#include "sys/syscall.h"
-
-int
-truncate (const char *path, off_t length)
-{
-  return __trap34 (SYS_truncate, path, length, 0);
-}
+/* Nothing here. */
